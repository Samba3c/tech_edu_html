<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>迷你小畫家</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      display: flex;
    }
    #tools {
      position: fixed;
      left: 0;
      top: 0;
      width: 150px;
      height: 100vh;
      background: #f0f0f0;
      padding: 10px;
      display: flex;
      flex-direction: column;
      gap: 10px;
      align-items: center;
    }
    canvas {
      margin-left: 200px;
      margin-top: 40px;
      border: 1px solid #000;
    }
    button, input[type="file"] {
      padding: 10px;
      font-size: 14px;
      width: 100%;
    }
    .active {
      background-color: #ffa500 !important;
    }
    #title-btn {
      font-size: 18px;
      font-weight: bold;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div id="tools">
    <!-- 新增標題按鈕 -->
    <button id="title-btn">🖌️ 迷你小畫家</button>
    <!-- 其他工具按鈕 -->
    <input type="file" id="upload-image" />
    <button id="undo-btn">返回</button>
    <button id="redo-btn">重做</button>
    <input type="color" id="color-picker" value="#000000">
    <label for="brush-size">畫筆大小:</label>
    <input type="range" id="brush-size" min="1" max="10" value="5">
    <select id="brush-shape">
      <option value="round">畫筆形狀:圓形</option>
      <option value="square">畫筆形狀:正方形</option>
    </select>
    <button id="fill-btn">油漆桶填色</button>
    <button id="clear-btn">清除畫布</button>
    <button id="save-btn">存檔</button>
    <button id="title-auther">程式作者：阿邦老師</button>

  </div>

  <canvas id="drawing-canvas" width="1024" height="768"></canvas>

  <script>
    const canvas = document.getElementById('drawing-canvas');
    const ctx = canvas.getContext('2d');
    const brushSize = document.getElementById('brush-size');
    const brushShape = document.getElementById('brush-shape');
    const clearBtn = document.getElementById('clear-btn');
    const fillBtn = document.getElementById('fill-btn');
    const undoBtn = document.getElementById('undo-btn');
    const redoBtn = document.getElementById('redo-btn');
    const saveBtn = document.getElementById('save-btn');
    const colorPicker = document.getElementById('color-picker');
    const uploadImage = document.getElementById('upload-image');
    const titleBtn = document.getElementById('title-btn');

    let painting = false;
    let currentColor = "#000000";
    let filling = false;
    let history = [];
    let redoHistory = [];
    let uploadedImage = null;
    
    ctx.fillStyle = "#fff";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    function saveState() {
      redoHistory = [];
      history.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
    }
    
    colorPicker.addEventListener('input', (e) => {
      currentColor = e.target.value;
      ctx.strokeStyle = currentColor;
      ctx.fillStyle = currentColor;
    });

    canvas.addEventListener('mousedown', (e) => {
      saveState();
      if (filling) {
        fillCanvas(e.offsetX, e.offsetY);
      } else {
        painting = true;
        ctx.beginPath();
      }
    });

    canvas.addEventListener('mouseup', () => {
      painting = false;
      ctx.beginPath();
    });

    canvas.addEventListener('mousemove', (e) => {
      if (!painting) return;
      ctx.lineWidth = brushSize.value;
      ctx.lineCap = brushShape.value;
      ctx.strokeStyle = currentColor;
      ctx.lineTo(e.offsetX, e.offsetY);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(e.offsetX, e.offsetY);
    });

    clearBtn.addEventListener('click', () => {
      saveState();
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = "#fff";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
    });

    fillBtn.addEventListener('click', () => {
      filling = !filling;
      fillBtn.classList.toggle('active', filling);
      fillBtn.textContent = filling ? '停止填色' : '油漆桶填色';
    });

    undoBtn.addEventListener('click', () => {
      if (history.length > 0) {
        redoHistory.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
        const lastState = history.pop();
        ctx.putImageData(lastState, 0, 0);
      }
    });

    redoBtn.addEventListener('click', () => {
      if (redoHistory.length > 0) {
        const redoState = redoHistory.pop();
        history.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
        ctx.putImageData(redoState, 0, 0);
      }
    });

    saveBtn.addEventListener('click', () => {
      const link = document.createElement('a');
      link.href = canvas.toDataURL('image/png');
      link.download = '班級座號.png';
      link.click();
    });

    function fillCanvas(x, y) {
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const pixels = imageData.data;
      const targetIndex = (y * canvas.width + x) * 4;
      const targetColor = [pixels[targetIndex], pixels[targetIndex + 1], pixels[targetIndex + 2], pixels[targetIndex + 3]];
      const fillColor = hexToRgb(currentColor);
      if (colorsMatch(targetColor, fillColor)) return;
      
      const stack = [[x, y]];
      while (stack.length) {
        const [cx, cy] = stack.pop();
        const index = (cy * canvas.width + cx) * 4;
        if (!colorsMatch([pixels[index], pixels[index+1], pixels[index+2], pixels[index+3]], targetColor)) continue;
        pixels[index] = fillColor.r;
        pixels[index + 1] = fillColor.g;
        pixels[index + 2] = fillColor.b;
        pixels[index + 3] = 255;
        if (cx > 0) stack.push([cx - 1, cy]);
        if (cx < canvas.width - 1) stack.push([cx + 1, cy]);
        if (cy > 0) stack.push([cx, cy - 1]);
        if (cy < canvas.height - 1) stack.push([cx, cy + 1]);
      }
      ctx.putImageData(imageData, 0, 0);
    }

    function hexToRgb(hex) {
      const r = parseInt(hex.slice(1, 3), 16);
      const g = parseInt(hex.slice(3, 5), 16);
      const b = parseInt(hex.slice(5, 7), 16);
      return { r, g, b };
    }

    function colorsMatch(color1, color2) {
      return color1[0] === color2[0] && color1[1] === color2[1] && color1[2] === color2[2] && color1[3] === color2[3];
    }

    // 上傳圖片並顯示
    uploadImage.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (!file) return;
      
      const reader = new FileReader();
      reader.onload = (event) => {
        const img = new Image();
        img.onload = () => {
          uploadedImage = img;
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          ctx.drawImage(uploadedImage, 0, 0, canvas.width, canvas.height);
        };
        img.src = event.target.result;
      };
      reader.readAsDataURL(file);
    });
  </script>
</body>
</html>
